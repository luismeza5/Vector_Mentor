"""RAG H√≠brido - Funciona con o sin embeddings"""

from typing import List, Dict, Any, Optional
from langchain_core.documents import Document
from config.settings import settings

class HybridRAGManager:
    """RAG que funciona con embeddings cuando est√° disponible, sino usa b√∫squeda simple"""
    
    def __init__(self):
        self.documents = []
        self.use_embeddings = False
        self.vector_store = None
        self.embeddings = None
        
        # Intentar cargar sistema completo
        self._try_initialize_full_rag()
        
        # Si falla, usar versi√≥n simple
        if not self.use_embeddings:
            print("‚ö†Ô∏è Usando RAG simple sin embeddings")
            self._add_initial_content()
    
    def _try_initialize_full_rag(self):
        """Intenta inicializar el sistema RAG completo"""
        try:
            from langchain_openai import OpenAIEmbeddings
            from langchain_community.vectorstores import Chroma
            import os
            
            # Verificar API key m√°s estrictamente
            if not settings.OPENAI_API_KEY or len(settings.OPENAI_API_KEY) < 20:
                print(f"‚ö†Ô∏è API Key no v√°lida (longitud: {len(settings.OPENAI_API_KEY) if settings.OPENAI_API_KEY else 0})")
                raise Exception("API Key no configurada correctamente")
            
            print(f"üîë API Key detectada (longitud: {len(settings.OPENAI_API_KEY)})")
            
            # Configurar variable de entorno para OpenAI (AQU√ç ES DONDE VA)
            os.environ["OPENAI_API_KEY"] = settings.OPENAI_API_KEY
            
            # Inicializar embeddings SIN par√°metros adicionales
            self.embeddings = OpenAIEmbeddings(
                model=settings.EMBEDDING_MODEL
            )
            
            # Crear directorio si no existe
            os.makedirs(settings.CHROMA_PERSIST_DIRECTORY, exist_ok=True)
            
            self.vector_store = Chroma(
                persist_directory=settings.CHROMA_PERSIST_DIRECTORY,
                embedding_function=self.embeddings
            )
            
            # Probar embedding simple para verificar conectividad
            print("üß™ Probando conectividad con OpenAI...")
            test_embedding = self.embeddings.embed_query("test")
            print(f"‚úÖ Conectividad OK - embedding dimensi√≥n: {len(test_embedding)}")
            
            self.use_embeddings = True
            print("‚úÖ RAG completo con embeddings inicializado")
            
            # Agregar contenido inicial si la base est√° vac√≠a
            if self.vector_store._collection.count() == 0:
                print("üìö Base vectorial vac√≠a, agregando contenido inicial...")
                self._add_initial_content_to_vectorstore()
            else:
                print(f"üìö Base vectorial existente con {self.vector_store._collection.count()} documentos")
            
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo inicializar RAG completo: {e}")
            self.use_embeddings = False

    def _add_initial_content_to_vectorstore(self):
        """Agrega contenido inicial a la base vectorial"""
        documents = [
            Document(
                page_content="""
                Un vector es una cantidad que tiene tanto magnitud como direcci√≥n. 
                En el plano cartesiano, un vector se puede representar como un par ordenado (x, y).
                La magnitud de un vector v = (x, y) se calcula como ||v|| = ‚àö(x¬≤ + y¬≤).
                Los vectores se pueden sumar componente a componente: (a, b) + (c, d) = (a+c, b+d).
                """,
                metadata={"topic": "vectores", "level": 1, "subtopic": "definicion_basica"}
            ),
            
            Document(
                page_content="""
                Las operaciones b√°sicas con vectores incluyen:
                1. Suma: u + v = (u‚ÇÅ + v‚ÇÅ, u‚ÇÇ + v‚ÇÇ)
                2. Resta: u - v = (u‚ÇÅ - v‚ÇÅ, u‚ÇÇ - v‚ÇÇ)  
                3. Multiplicaci√≥n por escalar: k¬∑v = (k¬∑v‚ÇÅ, k¬∑v‚ÇÇ)
                4. Producto punto: u¬∑v = u‚ÇÅv‚ÇÅ + u‚ÇÇv‚ÇÇ
                El producto punto da como resultado un escalar, no un vector.
                """,
                metadata={"topic": "vectores", "level": 2, "subtopic": "operaciones"}
            ),
            
            Document(
                page_content="""
                El producto punto (o producto escalar) entre dos vectores u = (u‚ÇÅ, u‚ÇÇ) y v = (v‚ÇÅ, v‚ÇÇ) 
                se define como u¬∑v = u‚ÇÅv‚ÇÅ + u‚ÇÇv‚ÇÇ = ||u|| ||v|| cos(Œ∏), donde Œ∏ es el √°ngulo entre los vectores.
                Si el producto punto es cero, los vectores son perpendiculares (ortogonales).
                Si es positivo, el √°ngulo es agudo; si es negativo, el √°ngulo es obtuso.
                """,
                metadata={"topic": "producto_punto", "level": 3, "subtopic": "definicion"}
            ),
            
            Document(
                page_content="""
                Una matriz es un arreglo rectangular de n√∫meros organizados en filas y columnas.
                Una matriz de m√ón tiene m filas y n columnas. Las operaciones b√°sicas incluyen:
                - Suma de matrices (del mismo tama√±o): se suman elemento a elemento
                - Multiplicaci√≥n por escalar: se multiplica cada elemento por el escalar
                - Multiplicaci√≥n de matrices: el elemento (i,j) es el producto punto de la fila i por la columna j
                """,
                metadata={"topic": "matrices", "level": 2, "subtopic": "definicion_operaciones"}
            ),
            
            Document(
                page_content="""
                Un sistema de ecuaciones lineales se puede escribir en forma matricial como Ax = b,
                donde A es la matriz de coeficientes, x es el vector de inc√≥gnitas, y b es el vector de t√©rminos independientes.
                Los m√©todos de soluci√≥n incluyen: eliminaci√≥n gaussiana, regla de Cramer, y factorizaci√≥n LU.
                Un sistema puede tener soluci√≥n √∫nica, infinitas soluciones, o no tener soluci√≥n.
                """,
                metadata={"topic": "sistemas_lineales", "level": 3, "subtopic": "forma_matricial"}
            )
        ]
        
        # Agregar a la base vectorial
        self.vector_store.add_documents(documents)
        self.vector_store.persist()
        print(f"‚úÖ {len(documents)} documentos agregados a la base vectorial")
    
    def _add_initial_content(self):
        """Agrega contenido inicial para versi√≥n simple"""
        self.documents = [
            Document(
                page_content="""
                VECTORES B√ÅSICOS: Un vector es una cantidad que tiene magnitud y direcci√≥n. 
                En 2D se representa como (x, y). La magnitud es ||v|| = ‚àö(x¬≤ + y¬≤).
                Ejemplos: v = (3, 4) tiene magnitud ||v|| = ‚àö(9 + 16) = 5.
                Los vectores se suman componente a componente: (2, 3) + (1, 4) = (3, 7).
                """,
                metadata={"topic": "vectores", "level": 1, "keywords": ["vector", "magnitud", "direcci√≥n", "componentes"]}
            ),
            
            Document(
                page_content="""
                OPERACIONES CON VECTORES:
                1. Suma: u + v = (u‚ÇÅ + v‚ÇÅ, u‚ÇÇ + v‚ÇÇ)
                2. Resta: u - v = (u‚ÇÅ - v‚ÇÅ, u‚ÇÇ - v‚ÇÇ)
                3. Producto por escalar: k¬∑v = (k¬∑v‚ÇÅ, k¬∑v‚ÇÇ)
                4. Producto punto: u¬∑v = u‚ÇÅv‚ÇÅ + u‚ÇÇv‚ÇÇ
                Ejemplo: (2,3)¬∑(4,1) = 2√ó4 + 3√ó1 = 8 + 3 = 11
                """,
                metadata={"topic": "vectores", "level": 2, "keywords": ["suma", "resta", "producto", "escalar", "operaciones"]}
            ),
            
            Document(
                page_content="""
                PRODUCTO PUNTO: El producto punto u¬∑v = ||u|| ||v|| cos(Œ∏) donde Œ∏ es el √°ngulo entre vectores.
                Si u¬∑v = 0, los vectores son perpendiculares (ortogonales).
                Si u¬∑v > 0, el √°ngulo es agudo (< 90¬∞).
                Si u¬∑v < 0, el √°ngulo es obtuso (> 90¬∞).
                Ejemplo: (1,0)¬∑(0,1) = 1√ó0 + 0√ó1 = 0, son perpendiculares.
                """,
                metadata={"topic": "producto_punto", "level": 3, "keywords": ["producto", "punto", "escalar", "perpendicular", "ortogonal", "√°ngulo"]}
            ),
            
            Document(
                page_content="""
                MATRICES: Una matriz m√ón tiene m filas y n columnas.
                Suma: A + B se hace elemento a elemento (mismas dimensiones).
                Multiplicaci√≥n: (AB)·µ¢‚±º = suma de A·µ¢‚Çñ √ó B‚Çñ‚±º para todo k.
                Ejemplo matriz 2√ó2: [[1,2],[3,4]] √ó [[5,6],[7,8]] = [[19,22],[43,50]]
                """,
                metadata={"topic": "matrices", "level": 2, "keywords": ["matriz", "filas", "columnas", "multiplicaci√≥n", "suma"]}
            ),
            
            Document(
                page_content="""
                SISTEMAS LINEALES: Ax = b donde A es matriz, x vector inc√≥gnitas, b vector t√©rminos.
                M√©todos: Eliminaci√≥n Gaussiana, Regla de Cramer, factorizaci√≥n LU.
                Ejemplo: 2x + 3y = 7, x - y = 1 ‚Üí x = 2, y = 1
                Puede tener: soluci√≥n √∫nica, infinitas soluciones, o sin soluci√≥n.
                """,
                metadata={"topic": "sistemas_lineales", "level": 3, "keywords": ["sistema", "ecuaciones", "eliminaci√≥n", "gaussiana", "cramer", "soluci√≥n"]}
            )
        ]
        print(f"‚úÖ RAG simple inicializado con {len(self.documents)} documentos")
    
    async def similarity_search(self, query: str, k: int = 3, filter_level: int = None) -> List[Document]:
        """B√∫squeda que funciona con o sin embeddings"""
        
        if self.use_embeddings and self.vector_store:
            # Usar b√∫squeda vectorial
            try:
                filter_dict = {}
                if filter_level:
                    filter_dict = {"level": {"$lte": filter_level}}
                
                results = self.vector_store.similarity_search(
                    query, k=k, filter=filter_dict if filter_dict else None
                )
                return results
            except Exception as e:
                print(f"‚ö†Ô∏è Error en b√∫squeda vectorial, usando b√∫squeda simple: {e}")
        
        # B√∫squeda simple por palabras clave
        return self._simple_keyword_search(query, k, filter_level)
    
    def _simple_keyword_search(self, query: str, k: int, filter_level: int = None) -> List[Document]:
        """B√∫squeda simple por palabras clave"""
        query_words = query.lower().split()
        results = []
        
        for doc in self.documents:
            score = 0
            content_lower = doc.page_content.lower()
            keywords = doc.metadata.get("keywords", [])
            
            # Puntuaci√≥n por palabras en el contenido
            for word in query_words:
                if word in content_lower:
                    score += 2
                if word in keywords:
                    score += 3
            
            # Filtrar por nivel
            if filter_level:
                doc_level = doc.metadata.get("level", 3)
                if doc_level > filter_level:
                    continue
            
            if score > 0:
                results.append((doc, score))
        
        # Ordenar por score y retornar top k
        results.sort(key=lambda x: x[1], reverse=True)
        return [doc for doc, score in results[:k]]
    
    def search_by_topic(self, topic: str, level: int = None, k: int = 5) -> List[Document]:
        """Busca por tema espec√≠fico"""
        results = []
        
        for doc in self.documents:
            doc_topic = doc.metadata.get("topic", "")
            if topic.lower() in doc_topic.lower():
                if level is None or doc.metadata.get("level", 3) <= level:
                    results.append(doc)
        
        return results[:k]
    
    def get_collection_stats(self) -> Dict[str, Any]:
        """Estad√≠sticas de la colecci√≥n"""
        if self.use_embeddings and self.vector_store:
            try:
                count = self.vector_store._collection.count()
                return {
                    "count": count,
                    "status": "embeddings_active",
                    "type": "full_rag"
                }
            except:
                pass
        
        return {
            "count": len(self.documents),
            "status": "simple_active", 
            "type": "keyword_search",
            "topics": list(set(doc.metadata.get("topic", "") for doc in self.documents))
        }
    
    def add_documents(self, documents: List[Document]):
        """Agrega documentos al sistema"""
        if self.use_embeddings and self.vector_store:
            try:
                self.vector_store.add_documents(documents)
                print(f"‚úÖ {len(documents)} documentos agregados al vector store")
                return
            except Exception as e:
                print(f"‚ö†Ô∏è Error agregando a vector store: {e}")
        
        # Agregar a lista simple
        self.documents.extend(documents)
        print(f"‚úÖ {len(documents)} documentos agregados a la lista simple")