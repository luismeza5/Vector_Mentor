"""Formateador de matem√°ticas para mejorar la visualizaci√≥n en CLI"""

import re

class MathFormatter:
    """Formatea matem√°ticas para mejor visualizaci√≥n en consola"""
    
    @staticmethod
    def format_for_cli(text: str) -> str:
        """Convierte LaTeX y formato matem√°tico para CLI"""
        
        # Limpiar LaTeX b√°sico
        text = re.sub(r'\\\((.*?)\\\)', r'\1', text)  # \(...\) ‚Üí ...
        text = re.sub(r'\\\[(.*?)\\\]', r'\1', text, flags=re.DOTALL)  # \[...\] ‚Üí ...
        text = re.sub(r'\$\$(.*?)\$\$', r'\1', text, flags=re.DOTALL)  # $$...$$ ‚Üí ...
        text = re.sub(r'\$(.*?)\$', r'\1', text)  # $...$ ‚Üí ...
        
        # Convertir matrices LaTeX a formato legible
        text = re.sub(r'\\begin\{pmatrix\}(.*?)\\end\{pmatrix\}', 
                     MathFormatter._format_matrix, text, flags=re.DOTALL)
        
        # Limpiar comandos LaTeX comunes
        text = re.sub(r'\\times', '√ó', text)
        text = re.sub(r'\\cdot', '¬∑', text)
        text = re.sub(r'\\quad', '   ', text)
        text = re.sub(r'\\\\', '\n', text)
        text = re.sub(r'\\&', '  ', text)
        
        # Limpiar sub√≠ndices/super√≠ndices
        text = re.sub(r'_\{([^}]+)\}', r'_\1', text)
        text = re.sub(r'\^\{([^}]+)\}', r'^\1', text)
        
        # Limpiar comandos de formato
        text = re.sub(r'\\[a-zA-Z]+\{([^}]*)\}', r'\1', text)
        
        # Limpiar espacios extra y l√≠neas vac√≠as
        text = re.sub(r'\n\s*\n', '\n\n', text)
        text = re.sub(r'  +', ' ', text)
        
        return text.strip()
    
    @staticmethod
    def _format_matrix(match):
        """Formatea una matriz LaTeX para CLI"""
        content = match.group(1)
        
        # Dividir por filas (\\)
        rows = content.split('\\\\')
        
        formatted_rows = []
        for row in rows:
            if row.strip():
                # Dividir por columnas (&)
                cols = [col.strip() for col in row.split('&')]
                formatted_row = '  '.join(cols)
                formatted_rows.append(f"‚îÇ {formatted_row} ‚îÇ")
        
        if formatted_rows:
            return '\n' + '\n'.join(formatted_rows) + '\n'
        return content

class CLIRenderer:
    """Renderizador mejorado para la interfaz CLI"""
    
    @staticmethod
    def render_response(response: str) -> str:
        """Renderiza la respuesta con formato mejorado para CLI"""
        
        # Formatear matem√°ticas
        formatted = MathFormatter.format_for_cli(response)
        
        # Mejorar bullets y numeraci√≥n
        formatted = re.sub(r'^\* ', '‚Ä¢ ', formatted, flags=re.MULTILINE)
        formatted = re.sub(r'^\d+\.\s+\*\*([^*]+)\*\*', r'\1:', formatted, flags=re.MULTILINE)
        
        # Mejorar t√≠tulos
        formatted = re.sub(r'\*\*([^*]+)\*\*', r'\nüìå \1\n', formatted)
        
        # Agregar separadores visuales
        sections = formatted.split('\nüìå')
        if len(sections) > 1:
            formatted_sections = []
            for i, section in enumerate(sections):
                if i == 0 and section.strip():
                    formatted_sections.append(section)
                elif section.strip():
                    formatted_sections.append(f"üìå{section}")
            
            formatted = '\n\n'.join(formatted_sections)
        
        return formatted

def improve_cli_display():
    """Mejora la visualizaci√≥n en CLI"""
    
    # Configurar encoding para Windows
    import sys
    import os
    
    if os.name == 'nt':  # Windows
        try:
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
        except:
            pass
    
    # Configurar colores b√°sicos si es posible
    try:
        import colorama
        colorama.init()
        return True
    except ImportError:
        return False

# Funci√≥n para usar en main.py
def format_tutor_response(response: str) -> str:
    """Funci√≥n principal para formatear respuestas del tutor"""
    renderer = CLIRenderer()
    return renderer.render_response(response)

# Test de ejemplo
if __name__ == "__main__":
    test_response = """**ü§ñ VectorMentor:**1. **Definici√≥n clara y precisa:** El producto matricial es una operaci√≥n que se realiza entre dos matrices para obtener una nueva matriz. Para que esto sea posible, el n√∫mero de columnas de la primera matriz debe ser igual al n√∫mero de filas de la segunda matriz.
1. **Explicaci√≥n del concepto:** Imagina que cada matriz representa un conjunto de datos o transformaciones. Al multiplicar matrices, estamos combinando estas transformaciones. Cada elemento de la matriz resultante se obtiene multiplicando los elementos de una fila de la primera matriz por los elementos de una columna de la segunda matriz y sumando los resultados.
2. **Ejemplo num√©rico espec√≠fico:** Supongamos que tenemos las siguientes matrices:
[ A = \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}, \\quad B = \\begin{pmatrix} 5 & 6 \\\\ 7 & 8 \\end{pmatrix} ]
Para calcular el producto ( C = A \\times B ):
   * Elemento ( C_{11} ) (fila 1, columna 1): [ C_{11} = (1 \\times 5) + (2 \\times 7) = 5 + 14 = 19 ]
   * Elemento ( C_{12} ) (fila 1, columna 2): [ C_{12} = (1 \\times 6) + (2 \\times 8) = 6 + 16 = 22 ]"""
    
    print("ANTES:")
    print(test_response[:200] + "...")
    print("\nDESPU√âS:")
    formatted = format_tutor_response(test_response)
    print(formatted[:300] + "...")